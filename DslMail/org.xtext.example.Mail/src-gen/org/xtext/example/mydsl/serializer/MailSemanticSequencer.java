/*
 * generated by Xtext 2.32.0
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.mydsl.mail.AlefasoMailaka;
import org.xtext.example.mydsl.mail.EmailRecipient;
import org.xtext.example.mydsl.mail.MailPackage;
import org.xtext.example.mydsl.services.MailGrammarAccess;

@SuppressWarnings("all")
public class MailSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MailGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MailPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MailPackage.ALEFASO_MAILAKA:
				sequence_AlefasoMailaka(context, (AlefasoMailaka) semanticObject); 
				return; 
			case MailPackage.EMAIL_RECIPIENT:
				sequence_EmailRecipient(context, (EmailRecipient) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Model returns AlefasoMailaka
	 *     AlefasoMailaka returns AlefasoMailaka
	 *
	 * Constraint:
	 *     (
	 *         message=STRING 
	 *         objet_de_mail=STRING 
	 *         recipients+=EmailRecipient 
	 *         recipients+=EmailRecipient* 
	 *         sender=STRING 
	 *         password=STRING
	 *     )
	 * </pre>
	 */
	protected void sequence_AlefasoMailaka(ISerializationContext context, AlefasoMailaka semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     EmailRecipient returns EmailRecipient
	 *
	 * Constraint:
	 *     email=STRING
	 * </pre>
	 */
	protected void sequence_EmailRecipient(ISerializationContext context, EmailRecipient semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MailPackage.Literals.EMAIL_RECIPIENT__EMAIL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MailPackage.Literals.EMAIL_RECIPIENT__EMAIL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEmailRecipientAccess().getEmailSTRINGTerminalRuleCall_0(), semanticObject.getEmail());
		feeder.finish();
	}
	
	
}
