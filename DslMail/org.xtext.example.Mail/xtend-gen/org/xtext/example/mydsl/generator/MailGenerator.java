/**
 * generated by Xtext 2.32.0
 */
package org.xtext.example.mydsl.generator;

import java.util.List;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.eclipse.xtext.xbase.lib.ListExtensions;
import org.xtext.example.mydsl.mail.AlefasoMailaka;
import org.xtext.example.mydsl.mail.EmailRecipient;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class MailGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(resource.getAllContents());
    for (final EObject element : _iterable) {
      if ((element instanceof AlefasoMailaka)) {
        final AlefasoMailaka mailaka = ((AlefasoMailaka) element);
        final EList<EmailRecipient> recipients = mailaka.getRecipients();
        final String objetDeMail = mailaka.getObjet_de_mail();
        final String message = mailaka.getMessage();
        final String sender = mailaka.getSender();
        final String password = mailaka.getPassword();
        final Function1<EmailRecipient, String> _function = (EmailRecipient recipient) -> {
          return recipient.getEmail();
        };
        final List<String> recipientsEmails = ListExtensions.<EmailRecipient, String>map(mailaka.getRecipients(), _function);
        final String recipientsEmailsString = IterableExtensions.join(recipientsEmails, "\",\"");
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("const express = require(\'express\');");
        _builder.newLine();
        _builder.append("const app = express();");
        _builder.newLine();
        _builder.append("app.use(express.json());");
        _builder.newLine();
        _builder.append("const { createTransport } = require(\'nodemailer\')");
        _builder.newLine();
        _builder.newLine();
        _builder.newLine();
        _builder.newLine();
        _builder.append("const PORT = 3000;");
        _builder.newLine();
        _builder.newLine();
        _builder.append("app.listen(PORT, () => {");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("console.log(\"\ud83d\ude80 @ http://localhost:\" + PORT)");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("try {");
        _builder.newLine();
        _builder.append("                                ");
        _builder.append("// Utilisez un tableau pour spécifier plusieurs destinataires");
        _builder.newLine();
        _builder.append("                                ");
        _builder.append("const toList =[\"");
        _builder.append(recipientsEmailsString, "                                ");
        _builder.append("\"];");
        _builder.newLineIfNotEmpty();
        _builder.append("                                ");
        _builder.append("const subject = \"");
        _builder.append(objetDeMail, "                                ");
        _builder.append("\";");
        _builder.newLineIfNotEmpty();
        _builder.append("                                ");
        _builder.append("const message = \"");
        _builder.append(message, "                                ");
        _builder.append("\";");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.newLine();
        _builder.append("                                ");
        _builder.append("const transporter = createTransport({");
        _builder.newLine();
        _builder.append("                                    ");
        _builder.append("host: \"smtp.gmail.com\",");
        _builder.newLine();
        _builder.append("                                    ");
        _builder.append("port: 587,");
        _builder.newLine();
        _builder.append("                                    ");
        _builder.append("secure: false,");
        _builder.newLine();
        _builder.append("                                    ");
        _builder.append("auth: {");
        _builder.newLine();
        _builder.append("                                        ");
        _builder.append("user: \"");
        _builder.append(sender, "                                        ");
        _builder.append("\",");
        _builder.newLineIfNotEmpty();
        _builder.append("                                        ");
        _builder.append("pass: \"");
        _builder.append(password, "                                        ");
        _builder.append("\"");
        _builder.newLineIfNotEmpty();
        _builder.append("                                    ");
        _builder.append("}");
        _builder.newLine();
        _builder.append("                                ");
        _builder.append("})");
        _builder.newLine();
        _builder.append("    ");
        _builder.newLine();
        _builder.append("                                ");
        _builder.append("// Envoyez un email à chaque destinataire dans la liste");
        _builder.newLine();
        _builder.append("                                ");
        _builder.append("for (const to of toList) {");
        _builder.newLine();
        _builder.append("                                    ");
        _builder.append("const data = {");
        _builder.newLine();
        _builder.append("                                        ");
        _builder.append("from: process.env.MAIL_USER,");
        _builder.newLine();
        _builder.append("                                        ");
        _builder.append("to,");
        _builder.newLine();
        _builder.append("                                        ");
        _builder.append("subject,");
        _builder.newLine();
        _builder.append("                                        ");
        _builder.append("html: \'<h1> BONJOUR ET BIENVENU SUR VFTM </h1>\' +");
        _builder.newLine();
        _builder.append("                                            ");
        _builder.append("\'<h3> <u>Notre Information du Jour</u> </h3>\' +");
        _builder.newLine();
        _builder.append("                                            ");
        _builder.append("\'<p>\' + message + \'</p>\' +");
        _builder.newLine();
        _builder.append("                                            ");
        _builder.append("\'<p> <i> Merci de vous avoir inscrit sur notre site web </i> </p>\'");
        _builder.newLine();
        _builder.append("                                    ");
        _builder.append("}");
        _builder.newLine();
        _builder.append("    ");
        _builder.newLine();
        _builder.append("                                    ");
        _builder.append("transporter.sendMail(data, (err, info) => {");
        _builder.newLine();
        _builder.append("                                        ");
        _builder.append("if (err) return console.log(err)");
        _builder.newLine();
        _builder.append("                                        ");
        _builder.append("console.log(\"Mail bien envoyé à\", to);");
        _builder.newLine();
        _builder.append("                                    ");
        _builder.append("});");
        _builder.newLine();
        _builder.append("                                ");
        _builder.append("}");
        _builder.newLine();
        _builder.append("    ");
        _builder.newLine();
        _builder.append("                            ");
        _builder.append("} catch (error) {");
        _builder.newLine();
        _builder.append("                                ");
        _builder.append("next(error)");
        _builder.newLine();
        _builder.append("                            ");
        _builder.append("}");
        _builder.newLine();
        _builder.append("});");
        _builder.newLine();
        final String jsCode = _builder.toString();
        fsa.generateFile("output.js", jsCode);
      }
    }
  }
}
